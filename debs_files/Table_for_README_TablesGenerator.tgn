{"rows_views":[[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}]],"model":{"rows":[[{"value":"Script","cspan":1,"rspan":1,"markup":[1,6]},{"value":"Input","cspan":1,"rspan":1,"markup":[1,5]},{"value":"Operations","cspan":1,"rspan":1,"markup":[1,10]},{"value":"Output","cspan":1,"rspan":1,"markup":[1,6]}],[{"value":"[00](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/00_search_pdb.py)","cspan":1,"rspan":1,"markup":[3,80]},{"value":"genes in .txt format\n(e.g. SOD1 ALS2 FUS)","cspan":1,"rspan":1,"markup":[1,41]},{"value":"- creates a folder called Results in the current \nworking directory where all the output is going to be stored\n\n- searches the pdb for all structures associated with \neach gene name (in Homo Sapiens)","cspan":1,"rspan":1,"markup":[0,199]},{"value":"- directory: Results/\n\n- `00_search_overview_PDBids.csv`\n*contains all gene names and corresponding PDB IDs if available*","cspan":1,"rspan":1,"markup":[0,121]}],[{"value":"[01](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/01_download_files.py)","cspan":1,"rspan":1,"markup":[2,84]},{"value":"`00_search_overview_PDBids.csv`","cspan":1,"rspan":1,"markup":[13,31]},{"value":"- creates a folder for each gene in the Results directory\n\n- downloads mmCIF, pdb, and fasta files for all structures into the respective gene folder","cspan":1,"rspan":1,"markup":[0,149]},{"value":"- directory per gene: Results/GENENAME/\n\nIn each respective gene folder:\n- mmCIF, pdb, and fasta files\nstored in format `pdbID.cif/pdb/fasta`\n\nIn the Results folder:\n- `01_search_overview_folders.csv`\n*lists all the the newly created folders and their contents*\n- `01_search_overview_n_structures.csv`\n*lists number of structures retrieved per gene*","cspan":1,"rspan":1,"markup":[0,41,1,31,0,71,1,22,0,184]}],[{"value":"[02](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/02_parse_cif_files.py)","cspan":1,"rspan":1,"markup":[5,85]},{"value":"`01_search_overview_folders.csv`","cspan":1,"rspan":1,"markup":[13,32]},{"value":"**loops over all created folders and parses all mmCIf files, extracting:**\n\n- resolution (999 for missing values/NMR structures)\n- polypeptide sequences (corresponds to sequences as shown in PyMOL)\n- fasta sequences","cspan":1,"rspan":1,"markup":[14,74,0,141]},{"value":"In each respective gene folder:\n- `_ex.fasta` file for every structure \n*fasta file created from the mmCIF file*\n- `GENENAME_02_resolutions.csv`\n*contains the resolution for all structures associated with this gene*\n- `GENENAME_02_poly_seq.csv`\n*contains all polypeptide sequences for all structures associated with this gene*\n\nIn the Results folder:\n- `02_all_resolutions.csv`\n*contains the resolutions of all parsed structures for all genes*\n- `02_all_poly_seq.csv`\n*contains all polypeptide sequences for all structures of all genes*","cspan":1,"rspan":1,"markup":[1,31,0,297,1,22,0,186]}],[{"value":"[03](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/03_parse_fasta_files.py)","cspan":1,"rspan":1,"markup":[6,87]},{"value":"`01_search_overview_folders.csv`","cspan":1,"rspan":1,"markup":[13,32]},{"value":"**loops over folders containing fasta and _ex.fasta files and:**\n\nextracts info from fasta files, incl:\n   - chain name\n   - description\n   - species\n   - sequence\n\nextracts info from _ex.fasta files, incl:\n   - chain name\n   - description\n   - uniprot id \n   - sequence\n\ncombines info from the two files","cspan":1,"rspan":1,"markup":[14,64,0,2,1,97,0,2,1,105,0,2,1,32]},{"value":"In each respective gene folder:\n- `GENENAME_03_fasta_info.csv`\n*contains information extracted from all fasta files for this gene*\n- `GENENAME_03_fasta_ex_info.csv`\n*contains information extracted from all _ex.fasta files for this gene*\n- `GENENAME_03_fasta_combined_info.csv`\n*contains combined information extracted from all fasta and _ex.fasta files for this gene*\n\nIn the Results folder: \n- `03_fasta_info.csv`\n*contains information extracted from all fasta files for all genes*\n- `03_fasta_ex_info.csv`\n*contains information extracted from all _ex.fasta files for all genes*\n- `03_fasta_combined_info.csv`\n*contains combined information extracted from all fasta and _ex.fasta files for all genes*","cspan":1,"rspan":1,"markup":[1,31,0,338,1,23,0,309]}],[{"value":"[04](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/04_blast_against_reference.py)","cspan":1,"rspan":1,"markup":[7,93]},{"value":"`03_fasta_combined_info.csv`","cspan":1,"rspan":1,"markup":[13,28]},{"value":"- creates a directory called RefSeqs in the Results directory\n............................................................................................................\n\n- loops over input csv file (one row for each unique sequence in all the pdb structures for all genes)\n\n- extracts the reference sequence for each gene from the Uniprot reference fasta into the RefSeqs directory\n\n- writes a fasta file for each unique sequence/chain in the input csv into the RefSeqs directory\n\n- performs BLASTp of all sequences against their respective reference sequence (e.g. FUS canonical sequence serves as reference for all sequences in all FUS structures) (output stored in .xml format in RefSeqs)\n\n- uses the blast output (xml files) to identify mismatches","cspan":1,"rspan":1,"markup":[0,753]},{"value":"- directory: Results/Refseqs\n\nIn the RefSeqs folder:\n- reference sequence fasta files\nin format `GENE_reference.fasta`\n- unique sequences fasta files\nin format `GENE_pdbID_Chains.fasta`\n- BLASTp output files (.xml)\nin format `GENE_pdbID_Chains.xml`\n\nIn the Results folder: \n- `04_blast_two_sequences.csv`\n*lists all the information in the input file and the corresponding BLASTp results*","cspan":1,"rspan":1,"markup":[0,30,1,22,0,198,1,23,0,114]}],[{"value":"[05](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/05_pdb_extract_unsolved_res.py)","cspan":1,"rspan":1,"markup":[8,94]},{"value":"`01_search_overview_folders.csv`\n\n`04_blast_two_sequences.csv`\n","cspan":1,"rspan":1,"markup":[13,32,0,2,13,28,0,1]},{"value":"- loops over folders and extracts info on missing residues / residues which have not been solved in the crystal structure from each pdb file\n\n- combines information on unsolved residues with info from 06_blast_fasta.csv / 08_blast_two_sequences.csv","cspan":1,"rspan":1,"markup":[0,248]},{"value":"In the Results folder: \n- `05_unsolved_residues_per_structure.csv`\n*lists all unsolved residues in all structures for all genes (one row for each structure)*\n- `05_unsolved_residues_per_chain.csv`\n*lists all unsolved residues in all chains of all structures for all genes (one row for each chain)*\n- `05_all_info.csv`\n*contains all the information from 04_blast_two_sequences.csv plus on unsolved residues extracted from pdb files*","cspan":1,"rspan":1,"markup":[1,23,0,408]}],[{"value":"[06](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/06_best_structure_per_mutation.py)","cspan":1,"rspan":1,"markup":[9,97]},{"value":"`05_all_info.csv`\n\n`02_all_resolutions.csv`","cspan":1,"rspan":1,"markup":[13,17,0,2,13,24]},{"value":"- combines the two dfs (according to PDBid)\n\n- filters out sequences shorter than a given percentage of the reference sequence (set variable `relative_sequence_length`)\n\n- filters out sequences whose best hsp covers less than a given percentage of the reference sequence (set variable `hsp_coverage`)\n\n- sort/filter the df to get:\n 1. the best structure per point mutation (structures with only this one mutation and no other mutations)\n 2. the best structure per unique combination of mutations available in the PDB\n 3. the best structure for any specific mutation, regardless of other mutations in the same structure","cspan":1,"rspan":1,"markup":[0,618]},{"value":"In each respective gene folder:\n- `GENENAME_06_best_structure_per_point_mutation.csv`\n*lists best structure for each point mutation (one mutation per structure) in this gene*\n- `GENENAME_06_best_structure_all_unique_combinations.csv`\n*lists best structure for all unique mismatch combinations for this gene*\n- `GENENAME_06_best_structure_any_mutation.csv`\n*lists best structure for any mismatch in this gene regardless of other mismatches in this structure*\n\nIn the Results folder: \n- `06_best_structure_per_point_mutation.csv`\n*lists best structure for each point mutation (one mutation per structure) in all genes*\n- `06_best_structure_all_unique_combinations.csv`\n*lists best structure for all unique mismatch combinations for all genes*\n- `06_best_structure_any_mutation.csv`\n*lists best structure for any mismatch for all genes regardless of other mismatches in this structure*","cspan":1,"rspan":1,"markup":[1,31,0,428,1,23,0,400]}],[{"value":"[07_a](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/07_a_ClinVar_Annotations_edirect_per_gene_download_files.py)","cspan":1,"rspan":1,"markup":[10,125]},{"value":"`00_search_overview_availability.csv`","cspan":1,"rspan":1,"markup":[13,37]},{"value":"- query ClinVar for information on each gene of interest and download xml files with ids for all variants using edirect\n\n- parse xml files with ClinVar ids and download/retrieve xml data from ClinVar for all variant ids associated with a gene","cspan":1,"rspan":1,"markup":[0,242]},{"value":"- all xml files downloaded from ClinVar are stored in the newly created ClinVar_Annotations folder (a subfolder in the Results directory)\n\n- `07_a_ClinVar_Annotations_genes_no_data_retrieved.txt`\n*lists all genes for which no ClinVar annotations could be retrieved*","cspan":1,"rspan":1,"markup":[0,265]}],[{"value":"[07_b](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/07_b_ClinVar_Annotations_edirect_per_gene_parse_files.py)","cspan":1,"rspan":1,"markup":[11,122]},{"value":"`00_search_overview_availability.csv`","cspan":1,"rspan":1,"markup":[13,37]},{"value":"- parse xml files and create a df with ClinVar information for all variants for all input genes","cspan":1,"rspan":1,"markup":[0,95]},{"value":"- `07_b_ClinVar_Annotations.csv`\n*lists ClinVar annotations for all variants in all input genes*","cspan":1,"rspan":1,"markup":[0,96]}],[{"value":"[08](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/08_add_clinvar_annotations_to_best_structrures.py)","cspan":1,"rspan":1,"markup":[12,113]},{"value":"`06_best_structure_all_unique_combinations.csv`\n\n`06_best_structure_any_mutation.csv`\n\n\n`06_best_structure_per_point_mutation.csv`\n\n`07_b_ClinVar_Annotations.csv`","cspan":1,"rspan":1,"markup":[13,47,0,2,13,36,0,3,13,42,0,2,13,30]},{"value":"- adds availalable ClinVar annotations to all three best_structure tables (csv-files)","cspan":1,"rspan":1,"markup":[0,85]},{"value":"- `08_best_structure_all_unique_combinations.csv`\n*lists best structure for all unique mismatch combinations for all genes (incl. ClinVar annotations)*\n- `08_best_structure_any_mutation.csv)`\n*lists best structure for any mismatch for all genes regardless of other mismatches in this structure(incl. ClinVar annotations*\n- `08_best_structure_per_point_mutation.csv`\n*lists best structure for each point mutation (one mutation per structure) in all genes (incl. ClinVar annotations)*","cspan":1,"rspan":1,"markup":[0,482]}]]},"theme":null,"fixed_layout":false,"markup":{"instances":[{},{"style":{}},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/01_download_files.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/00_search_pdb.py","link_open_in_new_tab":true},null,{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/02_parse_cif_files.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/03_parse_fasta_files.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/04_blast_against_reference.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/05_pdb_extract_unsolved_res.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/06_best_structure_per_mutation.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/07_a_ClinVar_Annotations_edirect_per_gene_download_files.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/07_b_ClinVar_Annotations_edirect_per_gene_parse_files.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/08_add_clinvar_annotations_to_best_structrures.py","link_open_in_new_tab":true},{"style":{"color":"#905","backgroundColor":"#ddd"}},{"style":{"fontWeight":"bold"}},null]},"options":{"table_caption":"","table_label":"tab:my-table"}}