{"rows_views":[[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}}]],"model":{"rows":[[{"value":"Script","cspan":1,"rspan":1,"markup":[1,6]},{"value":"Input","cspan":1,"rspan":1,"markup":[1,5]},{"value":"Operations","cspan":1,"rspan":1,"markup":[1,10]},{"value":"Output","cspan":1,"rspan":1,"markup":[1,6]}],[{"value":"","cspan":1,"rspan":1,"markup":[]},{"value":"","cspan":1,"rspan":1,"markup":[]},{"value":"","cspan":1,"rspan":1,"markup":[]},{"value":"","cspan":1,"rspan":1,"markup":[]}],[{"value":"[00](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/00_search_pdb.py)","cspan":1,"rspan":1,"markup":[3,80]},{"value":"gene names specified using theÂ `-g` flag\n(e.g. `-g \"SOD1 ALS2 FUS\"`)","cspan":1,"rspan":1,"markup":[1,31,13,4,1,12,13,20,1,1]},{"value":"- creates a directory called `Results` in the current \nworking directory where all further outputs will be stored\n\n- sends a GET request to the PDB API to perform an exact search for\neach input gene name and the species Homo sapiens to identify all \navailable protein structures.","cspan":1,"rspan":1,"markup":[0,279]},{"value":"- directory: Results/\n\n- `00_search_overview_PDBids.csv`\n*contains all gene names and corresponding PDB IDs if available*\n\n- `00_search_overview_availability.csv`\n*contains a boolean value for each gene indicating whether if PDB data is available or not*","cspan":1,"rspan":1,"markup":[0,254]}],[{"value":"[01](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/01_download_files.py)","cspan":1,"rspan":1,"markup":[2,84]},{"value":"`00_search_overview_PDBids.csv`","cspan":1,"rspan":1,"markup":[13,31]},{"value":"- creates a directory in the Results directory for each input gene with available PDB data to store gene-specific outputs\n\n- uses Biopython (Bio.PDB.PDBList module) to download all available mmCIF and PDB files for each gene into the respective gene folder\n\n- sends a GET request to the PDB API download all available fasta files for each gene into the respective gene folder","cspan":1,"rspan":1,"markup":[0,375]},{"value":"- directory per gene: Results/GENENAME_[*n available]structures/\n\nIn each respective gene folder:\n- all available mmCIF, pdb, and fasta files for the identifies structures\nstored in format `pdbID.cif/pdb/fasta`\n\nIn the Results folder:\n- `01_search_overview_folders.csv`\n*lists all the the newly created folders and their contents*\n- `01_search_overview_n_structures.csv`\n*lists number of structures retrieved per gene*","cspan":1,"rspan":1,"markup":[0,66,1,31,0,115,1,22,0,184]}],[{"value":"[02](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/02_parse_cif_files.py)","cspan":1,"rspan":1,"markup":[5,85]},{"value":"`01_search_overview_folders.csv`","cspan":1,"rspan":1,"markup":[13,32]},{"value":"\n- searches for mmCIF files in all folders listed in 01_search_overview_folders.csv\n\n**Parses all available mmCIF files, extracting:**\n- resolution (999 for missing values/NMR structures)\n- experimental methods (e.g. X-Ray Crystallography) \n- polypeptide sequences (uninterrupted AA sequences in the structures with no unsolved residues)\n- sequence information in fasta format (stored in files named `[PDB_id]_ex.fasta`)","cspan":1,"rspan":1,"markup":[0,85,14,49,0,286]},{"value":"In each respective gene folder:\n- `_ex.fasta` file for every structureÂ \n*fasta file created from the mmCIF file*\n- `GENENAME_02_resolutions.csv`\n*contains the resolution for all structures associated with this gene*\n- `GENENAME_02_poly_seq.csv`\n*contains all polypeptide sequences for all structures associated with this gene*\n- `GENENAME_02_structure_info.csv`\n*lists all available header information for all structures associated with this gene*\n\nIn the Results folder:\n- `02_all_resolutions.csv`\n*contains the resolutions of all parsed structures for all genes*\n- `02_all_poly_seq.csv`\n*contains all polypeptide sequences for all structures of all genes*\n- `02_structure_info.csv`\n*lists all available header information for all structures associated with all genes*","cspan":1,"rspan":1,"markup":[1,31,0,418,1,22,0,298]}],[{"value":"[03](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/03_parse_pdb_files_extract_unsolved_residues.py)","cspan":1,"rspan":1,"markup":[15,111]},{"value":"`01_search_overview_folders.csv`","cspan":1,"rspan":1,"markup":[13,32]},{"value":"- searches for PDB files in all folders listed in 01_search_overview_folders.csv\n\n- extracts info on missing residues / residues which have not been solved in the crystal structure","cspan":1,"rspan":1,"markup":[0,180]},{"value":"In the Results folder:Â \n- `03_unsolved_residues_per_structure.csv`\n*lists all unsolved residues in all structures for all genes (one row for each structure)*\n- `03_unsolved_residues_per_chain.csv`\n*lists all unsolved residues in all chains of all structures for all genes (one row for each chain)*\n","cspan":1,"rspan":1,"markup":[1,23,0,275]}],[{"value":"[04](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/04_parse_fasta_files.py)","cspan":1,"rspan":1,"markup":[6,87]},{"value":"`01_search_overview_folders.csv`","cspan":1,"rspan":1,"markup":[13,32]},{"value":"- searches for fasta and _ex.fasta files in all folders listed in 01_search_overview_folders.csv\n\n- extracts info from fasta files, incl:\nÂ Â Â - chain name\nÂ Â Â - description\nÂ Â Â - species\nÂ Â Â - sequence\n\n- extracts info from _ex.fasta files, incl:\nÂ Â Â - chain name\nÂ Â Â - description\nÂ Â Â - uniprot idÂ \nÂ Â Â - sequence\n\n- combines info from the two files","cspan":1,"rspan":1,"markup":[0,342]},{"value":"In each respective gene folder:\n- `GENENAME_04_fasta_info.csv`\n*contains information extracted from all fasta files for this gene*\n- `GENENAME_04_fasta_ex_info.csv`\n*contains information extracted from all _ex.fasta files for this gene*\n- `GENENAME_04_fasta_combined_info.csv`\n*contains combined information extracted from all fasta and _ex.fasta files for this gene*\n\nIn the Results folder:Â \n- `04_fasta_info.csv`\n*contains information extracted from all fasta files for all genes*\n- `04_fasta_ex_info.csv`\n*contains information extracted from all _ex.fasta files for all genes*\n- `04_fasta_combined_info.csv`\n*contains combined information extracted from all fasta and _ex.fasta files for all genes*","cspan":1,"rspan":1,"markup":[1,31,0,338,1,23,0,309]}],[{"value":"[05](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/05_blast_against_reference.py)","cspan":1,"rspan":1,"markup":[7,93]},{"value":"`04_fasta_combined_info.csv`","cspan":1,"rspan":1,"markup":[13,28]},{"value":"- creates a directory called RefSeqs in the Results directory\n............................................................................................................\n\n- loops over input csv fileÂ (one row for each unique sequence in all PDB structures for all genes)\n\n- extracts the reference sequence for each gene from the Uniprot reference fasta into the RefSeqs directory\n\n- writes a fasta file for each unique sequence/chain in the input csv into the RefSeqs directory\n\n- performs BLASTp of each sequence against its reference sequenceÂ (e.g. FUS canonical sequence serves as reference for all sequences in all FUS structures) (output stored in .xml format in RefSeqs)\n\n- parses the BLASTp output (xml files) to identify mismatches, gaps etc.","cspan":1,"rspan":1,"markup":[0,750]},{"value":"- directory: Results/RefSeqs\n- directory: Resutls/RefSeqs/PDB_seqs_and_blastp_outputs\n\nIn the RefSeqs folder:\n- A fasta file for each input gene containing the reference sequence\nin format `GENE_reference.fasta`\n\nIn the RefSeqs/PDB_seqs_and_blastp_outputs folder:\n- A fasta file for every unique sequence in the identified PDB structures\nin format `GENE_pdbID_Chains.fasta`\n- BLASTp output files (.xml) for all BLASTp runs\nin format `GENE_pdbID_Chains.xml`\n\nIn each respective gene folder:- `05_blastp_results.csv`\n*lists all the information in the input file and the corresponding BLASTp results for this gene*\n- `05_refeseq_warnings.csv`\n*will contain data if there is no or more than one identified reference sequence for this gene (only first one is used for further analyses)*\n- `05_blastp_warnings.csv`\n*will only contain data if there are warnings regarding BLASTp for this gene, including if BLASTp failed or if there is more than one alignment (should only be one as only one reference is used)*\n\nIn the Results folder:Â \n- `05_blastp_results.csv`\n*lists all the information in the input file and the corresponding BLASTp results*\n- `05_refeseq_warnings.csv`\n*lists genes with no or more than one identified reference sequence (only first one is used for further analyses)*\n- `05_blastp_warnings.csv`\n*lists warnings regarding BLASTp, including if BLASTp failed or if there is more than one alignment (should only be one as only one reference is used)*\n","cspan":1,"rspan":1,"markup":[0,87,1,22,0,104,1,50,0,195,1,33,13,23,1,1,16,96,0,395,1,23,0,432]}],[{"value":"[06_a](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/06_a_download_ClinVar_data.py)","cspan":1,"rspan":1,"markup":[8,95]},{"value":"`00_search_overview_availability.csv`","cspan":1,"rspan":1,"markup":[13,37]},{"value":"- uses Entrez Direct (GET request) to query ClinVar for information on each input gene\n\n- downloads xml files with ids for all variants for each input gene\n\n- parses xml files with variant ids for each gene to construct search urls for 250 ids at a time (to ensure url doesn't exceed maximum lenght)\n\n- uses constructed urls to download variant data (xml format) from ClinVar for all variant ids associated with each gene","cspan":1,"rspan":1,"markup":[0,421]},{"value":"- directory: Results/ClinVar_Annotations\n\nIn the Results/ClinVar_Annotations folder:\n- one xml file for each gene containing all assiociated variant ids in ClinVar\nin format `06_a_ClinVar_[gene]_ids.xml`\n\n- xml files containing variant information for 250 variants at a time\nin format `06_a_ClinVar_[gene]_data_batch_[*i*]_of_[*n* batches].xml`\n\nIn the Results folder:\n- `06_a_ClinVar_Annotations_genes_no_data_retrieved.txt`\n*lists all genes for which no ClinVar annotations were retrieved*\n","cspan":1,"rspan":1,"markup":[0,42,1,42,0,262,1,22,0,124]}],[{"value":"[06_b](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/06_b_parse_ClinVar_data.py)","cspan":1,"rspan":1,"markup":[9,92]},{"value":"(takes no input)","cspan":1,"rspan":1,"markup":[1,16]},{"value":"- parse the xml batch files containing variant information from ClinVar (created by the previous script [06_a](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/06_a_download_ClinVar_data.py))\n\n- create a dataframe with ClinVar information for all variants for all input genes","cspan":1,"rspan":1,"markup":[0,284]},{"value":"In each respective gene folder:\n- `GENENAME_06_b_ClinVar_Annotations.csv`\n*lists ClinVar annotations for all variants in this input genes*\n\nIn the Results folder:\n- `06_b_ClinVar_Annotations.csv`\n*lists ClinVar annotations for all variants in all input genes*","cspan":1,"rspan":1,"markup":[1,31,0,109,1,22,0,97]}],[{"value":"[07](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/07_combine_data_to_get_best_n_structures_per_sequence.py)","cspan":1,"rspan":1,"markup":[10,120]},{"value":"`02_structure_info.csv`\n\n`03_unsolved_residues_per_chain.csv`\n\n`05_blastp_results.csv`\n\n`06_b_ClinVar_Annotations.csv`","cspan":1,"rspan":1,"markup":[13,23,0,2,13,36,0,2,13,23,0,2,13,30]},{"value":"- combine the information in the 3 dfs `02_structure_info.csv`, `03_unsolved_residues_per_chain.csv`, `05_blastp_results.csv` (according to PDBid and chain)\n\n- filter out sequences which are shorter than a given percentage of the reference sequence (set variable `relative_sequence_length`)\n\n- filter out sequences whose best hsp covers less than a given percentage of the reference sequence (set variable `hsp_coverage`)\n\n**-sort/filter the df in order to get:**\n- n best structures (best resolution) for all single amino acid variants (SAVs) (structures with only this one mutation and no other mutations)\n- n best structures (best resolution) for all unique combinations of mutations available in the PDB\n- n best structures (best resolution) for any specific mutation, regardless of other mutations in the same structure\n- all wildtype structures (defined as HSP covering 99% of reference sequence, 100% similarity, no mismatches)\n\n- add all available ClinVar annotations to all three n_best_structure tables/dfs","cspan":1,"rspan":1,"markup":[0,423,14,40,0,553]},{"value":"In each respective gene folder:\n- `GENENAME_07_best_structures_per_SAV.csv`\n*lists n best structures for each SAV (one mutation per structure) for this gene (incl. ClinVar annotations)*\n- `GENENAME_07_best_structures_all_unique_combinations.csv`\n*lists n best structures for all unique sequences/mismatch combinations for this gene (incl. ClinVar annotations)*\n- `GENENAME_07_best_structures_any_mutation.csv`\n*lists n best structures for any variant/mismatch in this gene regardless of other mismatches in the same sequence (incl. ClinVar annotations)*\n- `GENENAME_07_wildtype_structures`\n*lists all available WT structures for this gene*\n\nIn the Results folder:Â \n- `07_best_structures_per_SAV.csv`\n*lists n best structures for each SAV (one mutation per structure) for all genes (incl. ClinVar annotations)*\n- `07_best_structures_all_unique_combinations.csv`\n*lists n best structures for all unique sequences/mismatch combinations for all genes (incl. ClinVar annotations)*\n- `07_best_structures_any_mutation.csv`\n*lists n best structures for any variant/mismatch in all genes regardless of other mismatches in the same sequence (incl. ClinVar annotations)*\n- `07_wildtype_structures`\n*lists all available WT structures for all genes*","cspan":1,"rspan":1,"markup":[1,31,0,610,1,23,0,572]}],[{"value":"[08](https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/08_download_AlphaFold_structures.py)","cspan":1,"rspan":1,"markup":[12,99]},{"value":"gene names specified using the `-g` flag\n(e.g.`-g \"SOD1 ALS2 FUS\"`)","cspan":1,"rspan":1,"markup":[1,31,13,4,1,11,13,20,1,1]},{"value":"- gets the corresponding UniProt ID for each gene name (in Homo Sapiens) via the UniProt API\n- creates a directory called `AlphaFold_structures`\n- downloads all AlphaFold2 predicted structures for the identified UniProt IDs\n- outputs a csv file called 08_AlphaFold_structures indicating download status for each structure","cspan":1,"rspan":1,"markup":[0,321]},{"value":"In the Results folder:\n- `08_AlphaFold_structures.csv`\n*lists information on downloaded AlphaFold predicted structures for all input genes*\n\nIn the Results/AlphaFold_structures folder:\n- AlphaFold predicted structures (WT) for all input genes (whenever available in AlphaFold database)","cspan":1,"rspan":1,"markup":[1,22,0,119,1,43,0,101]}]]},"theme":null,"fixed_layout":false,"markup":{"instances":[{},{"style":{}},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/01_download_files.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/00_search_pdb.py","link_open_in_new_tab":true},null,{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/02_parse_cif_files.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/04_parse_fasta_files.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/05_blast_against_reference.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/06_a_download_ClinVar_data.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/06_b_parse_ClinVar_data.py","link_open_in_new_tab":true},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/07_combine_data_to_get_best_n_structures_per_sequence.py","link_open_in_new_tab":true},null,{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/08_download_AlphaFold_structures.py","link_open_in_new_tab":true},{"style":{"color":"#905","backgroundColor":"#ddd"}},{"style":{"fontWeight":"bold"}},{"style":{"color":"#905"},"link_href":"https://github.com/Utilon/Pipeline_Git/blob/main/MutaPipe/03_parse_pdb_files_extract_unsolved_residues.py","link_open_in_new_tab":true},{"style":{"fontStyle":"italic"}}]},"options":{"table_caption":"","table_label":"tab:my-table"}}